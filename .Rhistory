- You must run sequentially the scripts in numerical order. To run a script you must click the run button
![](images/run.png)
- Each script has its instructions and explanations (in Spanish and English) within them as comment lines.
- You must wait until each task of each script is completely finished before running the next one.
- There are scripts that are not fundamental to the overall work, so if you prefer you can skip them, those are:
- 1.Dates_records: this script can be skipped if you data dates are already in format (YYYY-MM) **as text**. (However this script is quite basic and specific, so it may not be enough, sufficient, or functional to every date format. The important thing to remember is that you need your dates as text in the format YYYY-MM).
- 6.Visualization: this script is merely a visualization tool, it can be completely skipped. it is used to do a preliminary visual check of the models.
- 9.Export: this script just exports the models to Google Drive, if you don't want and/or need the rasters in your Drive, don't use it. However if you don't export then to your drive you wont be able to use them outside of GEE
PerformCalculations2 <-
function(DatInp,SurfVec,option) {
## #####################################################
##  Carry out all calculations as suggested in:
##  Mas, J.F., A. Perez-Vega, A. Ghilardi, S. Martinez,
## J. Octavio Loya-Carrillo, and E. Vega, "Suite of Tools for
## Assessing Thematic Map Accuracy", Geography Journal,
## vol. 2014, Article ID 372349, 10 pages, 2014. doi:10.1155/2014/372349.
## ##################################################
## Calculates raw confusion matrix
## according data input format
## DatInp
## data format 1: matrix of confusion
if (option=="matrix"|option=="Matrix") {
#
SurfVec<-as.numeric(SurfVec)
mafb<-as.matrix(DatInp)
if (is.null(colnames(mafb))) {nucat <- seq(1,length(SurfVec),1)} else {nucat <- colnames(mafb)}
} else {
## data format 2: dataframe with two columns: map and true
mapa<-DatInp[,1] ## map
refer<-DatInp[,2] ## reference
SurfVec<-as.numeric(SurfVec)
nucat<-sort(unique(c(unique(mapa), unique(refer))))
#nucat <- seq(1,length(SurfVec),1)
mafb<-array(0,dim=c(length(nucat),length(nucat)))
rownames(mafb) <- colnames(mafb) <- nucat
## fills raw matrix
for (c1 in 1:length(mapa) ){
x1 <- mapa[c1]
x2 <- refer[c1]
mafb[match(x1,nucat),match(x2,nucat)]<-mafb[match(x1,nucat),match(x2,nucat)]+1
} ## c1
} ## else
# ################################
## weighted matrix
PropCat <- SurfVec/sum(SurfVec)
mafp<-array(0,dim=c(length(nucat),length(nucat)))
rownames(mafp) <- colnames(mafp) <- nucat
## fill weighted matrix (adjusted to sampling effort) Eq. 1
for (cmapa in 1:ncol(mafb)) {
sR<-sum(mafb[cmapa,])
for ( crefe in 1:ncol(mafb) ) {
mafp[cmapa,crefe]<-( mafb[cmapa,crefe]* PropCat[cmapa] ) /sR
} ## crefe j
} ## cmapa i
# replace NaN by 0
mafp[is.nan(mafp)] <- 0
# ################################
dma<-diag(mafp)
###### Accuracy indices ################################################
## Overall accuracy Eq. 2 ################
ovacc<-sum(diag(mafp))
## User accuracy Eq. 3 ###########################
rosu<-rowSums(mafp)
UsAcc<-diag(mafp)/rosu ## matrix diagonal over columns marginals
## Producer accuracy Eq. 4 ######################
cosu<-colSums(mafp)
ProdAcc<-diag(mafp)/cosu ## matrix diagonal over rows marginals
## Category' proportions adjusted by classification error Eq. 4
PropCatAdj<-cosu
#print(PropCatAdj)
suremb<-rowSums(mafb)
############### Confidence Intervals ##########################################
## Half Confidence interval of overall accuracy  Eq. 5 #########################
VarOverAcc <- sum(  diag(mafp)*abs(PropCat-diag(mafp)) / rowSums(mafb) )  # Variance
HCIO<-1.96* sqrt(VarOverAcc) # t 0.05 x standard deviation
LowerOverallAcc <- ovacc - HCIO
UpperOverallAcc <- ovacc + HCIO
## Half Confidence interval of user accuracy Eq. 6 #############################
VarUserAcc <- ( diag(mafp)*abs(PropCat-diag(mafp)) ) / ( rowSums(mafb)*(PropCat*PropCat) )  # Variance
HCIU<-1.96* sqrt (VarUserAcc) # t 0.05 x standard deviation
HCIU[is.na(HCIU)] <- 0
LowerUsAcc <- UsAcc - HCIU
UpperUsAcc <- UsAcc + HCIU
## Half Confidence interval of producer accuracy Eq. 7 ##################
HCIp <- VarProdAcc <- HCIpAdj<- VarProp <- array(0,dim=c(length(PropCat)))
names(HCIp) <- names(HCIpAdj) <- names(VarProdAcc) <- names(VarProp) <- nucat
for (cj in 1:length(PropCat)) {
sumac<-0
for (ci in 1:length(PropCat)) {
if (ci!=cj){
sumac<-sumac+(mafp[ci,cj]*(PropCat[ci]-mafp[ci,cj])) / suremb[ci]
}
} ## (ci in 1:length(PropCat))
VarPA <- dma[cj]*(cosu[cj])^-4 * (  (dma[cj]*sumac) + ( (PropCat[cj]-dma[cj])*(cosu[cj]-dma[cj])^2 ) / suremb[cj]  )  # Variance
HCIp[cj]<- 1.96* sqrt(VarPA)
VarProdAcc[cj] <- VarPA
} ## (cj in 1:length(PropCat))
LowerProdAcc <- ProdAcc - HCIp
UpperProdAcc <- ProdAcc + HCIp
## Half Confidence interval of adjusted area proportion Eq.9 ###################
for (cj in 1:length(PropCat)) {
x <-  ((mafp[,cj]*suremb)/mafb[,cj])^2  * ((mafb[,cj]/suremb)*(1-(mafb[,cj]/suremb))/(suremb -1))
x[is.na(x)] <- 0
## small trick to avoid multiplication and/or division by zero
## (nij=0), see Eq. 9
VarProp[cj] <- sum(x)
HCIpAdj[cj]<- 1.96*sqrt(sum(x))
}
# Proportions
LowerpAdj <- PropCatAdj - HCIpAdj
UpperpAdj <- PropCatAdj + HCIpAdj
return(list(
RawMatrix=mafb,AdjMatrix=mafp,categories=nucat,                                                                      # Matrices, categories
OverallAcc=ovacc, UserAcc=UsAcc, ProducerAcc=ProdAcc, Proportion=PropCatAdj,                                         # Acc. indices
HCI_OverallAcc=HCIO, HCI_UserAcc=HCIU, HCI_ProdAcc=HCIp, HCI_Prop=HCIpAdj,                                           # Half Conf Intevals
VarOverAcc=VarOverAcc, VarUserAcc=VarUserAcc, VarProdAcc=VarProdAcc, VarProp=VarProp,                               #Variances
LowLimitOverallAcc=LowerOverallAcc, LowLimitUserAcc=LowerUsAcc, LowLimitProdAcc=LowerProdAcc, LowLimProp=LowerpAdj,  # Lower limits of Conf Interval
UpLimitOverallAcc=UpperOverallAcc, UpLimitUserAcc=UpperUsAcc, UpLimitProdAcc=UpperProdAcc, UpLimitProp=UpperpAdj))   # Upper limits of Conf Interval
} # End function
surf <- c(1181.52,33682.38,531.65,111.45,4239.29,2402.6,84.45,146287.84,262.06,1626.73,94.8,17311.93,22136.74,656.11,544.26)
readfile <- read.csv("C:\Users\gabriel.perilla\Documents\landsatMed\2009/matriz.csv")
readfile <- read.csv("C:/Users/gabriel.perilla/Documents/landsatMed/2009/matriz.csv")
View(readfile)
readfile <- read.csv("C:/Users/gabriel.perilla/Documents/landsatMed/2009/matriz.csv", sep = ";")
readfile <- read.csv("C:/Users/gabriel.perilla/Documents/landsatMed/2009/matriz.csv", sep = ";", header = TRUE)
readfile <- read.csv("C:/Users/gabriel.perilla/Documents/landsatMed/2009/matriz.csv", sep = ";", header = TRUE, row.names = 1)
PerformCalculations2(readfile,surf,"matrix")
readfile <- read.csv("C:/Users/gabriel.perilla/Documents/landsatMed/2000/matriz.csv", sep = ";", header = TRUE, row.names = 1)
View(readfile)
surf <- c(500.67,56375.57,284.76,90.67,4323.10,716.00,2787.98,75.27,124395.61,148.39,783.91,41.46,15341.86,23600.01,722.79,965.86)
PerformCalculations2(readfile,surf,"matrix")
readfile <- read.csv("C:/Users/gabriel.perilla/Documents/landsatMed/2000/matriz.csv", sep = ";", header = TRUE, row.names = 1)
readfile <- read.csv("C:/Users/gabriel.perilla/Documents/landsatMed/2000/matriz.csv", sep = ";", header = TRUE, row.names = 1)
PerformCalculations2(readfile,surf,"matrix")
PerformCalculations2(readfile,surf,"matrix")
